var documenterSearchIndex = {"docs":
[{"location":"README/#AJD-Aproximate-Joint-Diagonalization","page":"Getting Started","title":"AJD - Aproximate Joint Diagonalization","text":"","category":"section"},{"location":"README/#Repository-Description","page":"Getting Started","title":"Repository Description","text":"","category":"section"},{"location":"README/","page":"Getting Started","title":"Getting Started","text":"This Julia package implements two algorithms for approximate joint diagonalization. This repo is part of course work for computer science at masters level at TU Berlin.","category":"page"},{"location":"README/#ffdiag-Fast-Frobenius-Diagonalization","page":"Getting Started","title":"ffdiag - Fast Frobenius Diagonalization","text":"","category":"section"},{"location":"README/","page":"Getting Started","title":"Getting Started","text":"Andreas Ziehe, Pavel Laskov, Guido Nolte, and Klaus-Robert Müller. A fast algorithm for joint diagonalization with non-orthogonal transformations and its application to blind source separation. The Journal of Machine Learning Research, 5:777–800, 2004.","category":"page"},{"location":"README/","page":"Getting Started","title":"Getting Started","text":"Paper URL: https://www.jmlr.org/papers/volume5/ziehe04a/ziehe04a.pdf","category":"page"},{"location":"README/#QDiag-Fast-frobenius-Diagonalization","page":"Getting Started","title":"QDiag - Fast frobenius Diagonalization","text":"","category":"section"},{"location":"README/","page":"Getting Started","title":"Getting Started","text":"Roland Vollgraf and Klaus Obermayer. Quadratic optimization for simultaneous matrix diagonalization. IEEE Trans. Signal Process., 54(9):3270–3278, 2006. (DOI: 10.1109/TSP.2006.877673)","category":"page"},{"location":"README/","page":"Getting Started","title":"Getting Started","text":"Paper URL: https://www.researchgate.net/publication/3319827Quadraticoptimizationforsimultaneousmatrixdiagonalization","category":"page"},{"location":"README/#How-to-install","page":"Getting Started","title":"How to install","text":"","category":"section"},{"location":"README/#Through-Julia.Pkg","page":"Getting Started","title":"Through Julia.Pkg","text":"","category":"section"},{"location":"README/","page":"Getting Started","title":"Getting Started","text":"To install this Julia package using Julia's package manager, follow these steps:","category":"page"},{"location":"README/","page":"Getting Started","title":"Getting Started","text":"Open a terminal or command prompt.\nNavigate to the directory where you want to install the package.\nRun the command julia to start the Julia REPL.\nIn the Julia REPL, enter the package manager by pressing ].\nRun add AJD to add the package and its dependencies.\nExit the package manager by pressing Ctrl + C.\nYou can now use the package by importing it in your Julia code.","category":"page"},{"location":"README/","page":"Getting Started","title":"Getting Started","text":"For more detailed instructions, you can refer to the official documentation.","category":"page"},{"location":"README/","page":"Getting Started","title":"Getting Started","text":"(Image: Stable) (Image: Dev) (Image: Build Status) (Image: Coverage)","category":"page"},{"location":"README/#Cloning-from-Git","page":"Getting Started","title":"Cloning from Git","text":"","category":"section"},{"location":"README/","page":"Getting Started","title":"Getting Started","text":"To install this Julia package, you can use the following steps:","category":"page"},{"location":"README/","page":"Getting Started","title":"Getting Started","text":"Open a terminal or command prompt.\nNavigate to the directory where you want to install the package.\nRun the command git clone https://github.com/erdenay16/AJD.jl.git to clone the repository.\nChange into the cloned directory by running cd AJD.jl.\nStart Julia by typing julia in the terminal.\nIn the Julia REPL, enter the package manager by pressing ].\nRun activate . to activate the package environment.\nRun instantiate to install the package and its dependencies.\nExit the package manager by pressing Ctrl + C.\nYou can now use the package by importing it in your Julia code.","category":"page"},{"location":"README/","page":"Getting Started","title":"Getting Started","text":"For more detailed instructions, you can refer to the official documentation.","category":"page"},{"location":"README/#Example","page":"Getting Started","title":"Example","text":"","category":"section"},{"location":"README/#ffdiag","page":"Getting Started","title":"ffdiag","text":"","category":"section"},{"location":"README/","page":"Getting Started","title":"Getting Started","text":"c0 = zeros(2, 2, 2) #\n\nc0[:, :, 1] = [1.0 0.2; 0.2 0.8] #Diagonal Matrix\nc0[:, :, 2] = [0.5 0.3; 0.3 0.5] #Diagonal Matrix\n\nC, V, errs = ffdiag(c0) ","category":"page"},{"location":"README/","page":"Getting Started","title":"Getting Started","text":"The output of ffdiag:","category":"page"},{"location":"README/","page":"Getting Started","title":"Getting Started","text":"C = [0.7129098004138166 -5.551115123125783e-17;  #c0[:, :, 1]\n     0.0                 1.0354978428982857;;;\n\n     0.20201378693464273 2.7755575615628914e-17; #c0[:, :, 2]\n     5.551115123125783e-17 0.7693237926831918]\n\nV = [0.7468844481936993 -0.6649538488093691; \n     0.528907590114557   0.848679421878021]","category":"page"},{"location":"README/","page":"Getting Started","title":"Getting Started","text":"C is the diagonalized matrices of C0. Note that the off-diagonal values approach 0","category":"page"},{"location":"README/","page":"Getting Started","title":"Getting Started","text":"V is the transformation matrix that diagonalized the matrices in C","category":"page"},{"location":"README/","page":"Getting Started","title":"Getting Started","text":"err is returned so that it can be ploted. This can be ignored for most users. ","category":"page"},{"location":"README/","page":"Getting Started","title":"Getting Started","text":"Todo: add for qdiag ","category":"page"},{"location":"README/#Licence","page":"Getting Started","title":"Licence","text":"","category":"section"},{"location":"README/","page":"Getting Started","title":"Getting Started","text":"This package is licensed under the MIT License. You can find the full text of the license in the LICENSE file.","category":"page"},{"location":"","page":"AJD","title":"AJD","text":"CurrentModule = AJD","category":"page"},{"location":"#AJD","page":"AJD","title":"AJD","text":"","category":"section"},{"location":"","page":"AJD","title":"AJD","text":"Documentation for AJD.","category":"page"},{"location":"","page":"AJD","title":"AJD","text":"","category":"page"},{"location":"","page":"AJD","title":"AJD","text":"Modules = [AJD]","category":"page"},{"location":"#AJD.QDiag","page":"AJD","title":"AJD.QDiag","text":"QDiag(C_0, C, weights, approach, tolerance, maximum_iteration, \n    random_number_generator = Xoshiro()) -> AbstractArray{<:Real}\n\nThis is an implementation of the algorithm introduced in:      Vollgraf, Roland & Obermayer, Klaus. (2006).      Quadratic optimization for simultaneous matrix diagonalization.      Signal Processing, IEEE Transactions on. 54. 3270 - 3278. 10.1109/TSP.2006.877673. Namings of the parameters are consistent with the paper for easier understanding. \n\nArguments\n\nC_0::AbstractArray{<:Real}: This is the sphering matrix introduced as C^(0).\nC::AbstractArray{<:Real}: This is the set of matrices that is introduced as C\nweights::AbstractArray{<:Real}:: This is the weights vector mathbflpha. It will be   later normalized such that sumk=1K lpha_k = 1.\napproach::String: This is the flag for approaches \"NK3\" and \"N5\" introduced in the paper.\ntolerance::Real: This is the tolerance for the error.\nmaximum_iteration::Integer: Maximum number of iterations.\nrandomnumbergenerator::Xoshiro: This is random number generator for matrix W. Default   generator generates random numbers based on default_rng() but a seed can be introduced    by the user. This argument is added for testing purposes.\n\n\n\n\n\n","category":"function"},{"location":"#AJD.ffdiag","page":"AJD","title":"AJD.ffdiag","text":"ffdiag(C0, runs=100, tol=1e-9) -> AbstractArray{<:Real}, Matrix{<:Real}, Array{<:Real}\n\nCompute the transformation matrix that diagonalizes a set of symmetric matrices\n\nThis is an Implementation of the Algorithm introduced in:  Ziehe, Andreas; Laskov, Pavel; Nolte, Guido; Müller Klaus-Robert. (2004). A Fast Algorithm for Joint Diagonalization with Non-orthogonal Transformations and its Application to Blind Source Separation. Journal of Machine Learning Research 5 (2004) 777–800.\n\nThe function returns the diagonalized set of matrices, the diagonalization matrix and an array of diagonlization errors per iteration.\n\nArguments\n\nC0::AbstractArray{<:Real}: This is a set of matrices to be diagonalized.\nruns::Int: The maximum number of iterations. The default is max 100 iterations.\ntol::Float64: The tolerance for the error. The default is 1e-9.\n\n\n\n\n\n","category":"function"},{"location":"#AJD.plot_convergence-Tuple{AbstractArray{<:Real}, String}","page":"AJD","title":"AJD.plot_convergence","text":"plot_convergence(errs, label) \n\nPlot the convergence error over iterations on a logarithmic scale.\n\nArguments\n\nerrs::AbstractArray{<:Real} An array with the errors, where the index corresponds to the number of iteration.\nlabel::String Label of the figure.\n\n\n\n\n\n","category":"method"}]
}
